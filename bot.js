#!/usr/bin/env node

/**
 * Optimized Polygon Arbitrage Bot
 * 
 * Features:
 * - Real-time DEX price monitoring
 * - Advanced profit calculations with realistic costs
 * - MEV protection analysis
 * - Liquidity validation
 * - Multiple RPC provider support with failover
 * - Intelligent notification system
 * - Comprehensive error handling
 * 
 * Usage: npm start
 */

const path = require('path');
const fs = require('fs-extra');
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
const nodeVersion = process.version;
const requiredVersion = '16.0.0';
if (parseInt(nodeVersion.slice(1)) < parseInt(requiredVersion)) {
    console.error(`‚ùå Node.js version ${requiredVersion} or higher required. Current: ${nodeVersion}`);
    process.exit(1);
}

// –ò–º–ø–æ—Ä—Ç—ã
const ArbitrageBot = require('./scripts/arbitrageBot');
const logger = require('./scripts/logger');
const telegramNotifier = require('./scripts/telegram');
const { loadStats, saveStats } = require('./scripts/utils');

class BotManager {
    constructor() {
        this.bot = null;
        this.isShuttingDown = false;
        this.startTime = Date.now();
        this.restartCount = 0;
        this.maxRestarts = 5;
        this.restartCooldown = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.lastRestart = 0;
        
        this.setupErrorHandlers();
        this.setupGracefulShutdown();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
     */
    async start() {
        try {
            logger.logInfo('üöÄ Starting Optimized Polygon Arbitrage Bot Manager...');
            
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await this.performPreStartChecks();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const stats = await loadStats();
            stats.totalRuns = (stats.totalRuns || 0) + 1;
            stats.lastRun = new Date().toISOString();
            await saveStats(stats);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            this.bot = new ArbitrageBot();
            await this.bot.start();
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
            this.startPeriodicReporting();
            
            logger.logSuccess('‚úÖ Bot started successfully');
            
        } catch (error) {
            logger.logError('‚ùå Failed to start bot', error);
            await this.handleStartupError(error);
        }
    }
    
    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
     */
    async performPreStartChecks() {
        logger.logInfo('üîç Performing pre-start checks...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        await this.ensureDirectories();
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await this.validateConfiguration();
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.validateEnvironmentVariables();
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        this.validateDependencies();
        
        // 5. –¢–µ—Å—Ç Telegram
        await this.testTelegramConnection();
        
        logger.logSuccess('‚úÖ All pre-start checks passed');
    }
    
    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
     */
    async ensureDirectories() {
        const directories = [
            './data',
            './logs',
            './cache'
        ];
        
        for (const dir of directories) {
            await fs.ensureDir(dir);
        }
        
        logger.logInfo('üìÅ Directories created/verified');
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async validateConfiguration() {
        const configPath = path.join(__dirname, 'config/polygon.json');
        
        if (!await fs.pathExists(configPath)) {
            throw new Error('Configuration file not found: config/polygon.json');
        }
        
        const config = await fs.readJson(configPath);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        const requiredSections = ['tokens', 'dexes', 'tradingPaths', 'settings'];
        for (const section of requiredSections) {
            if (!config[section]) {
                throw new Error(`Missing configuration section: ${section}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        const requiredTokens = ['WMATIC', 'USDC', 'WETH'];
        for (const token of requiredTokens) {
            if (!config.tokens[token]) {
                throw new Error(`Missing required token: ${token}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ DEX
        const requiredDEXes = ['sushiswap', 'quickswap'];
        for (const dex of requiredDEXes) {
            if (!config.dexes[dex]) {
                throw new Error(`Missing required DEX: ${dex}`);
            }
        }
        
        logger.logInfo('‚öôÔ∏è Configuration validated');
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
     */
    validateEnvironmentVariables() {
        const warnings = [];
        const errors = [];
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω RPC
        const hasRPC = this.hasAnyRPCProvider();
        if (!hasRPC) {
            errors.push('No RPC providers configured. Please set POLYGON_RPC_1, ALCHEMY_API_KEY, or INFURA_API_KEY');
        }
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
        if (!process.env.TELEGRAM_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN === 'undefined') {
            warnings.push('TELEGRAM_BOT_TOKEN not set - notifications disabled');
        }
        
        if (!process.env.TELEGRAM_CHAT_ID || process.env.TELEGRAM_CHAT_ID === 'undefined') {
            warnings.push('TELEGRAM_CHAT_ID not set - notifications disabled');
        }
        
        // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        for (const warning of warnings) {
            logger.logWarning(`‚ö†Ô∏è ${warning}`);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if (errors.length > 0) {
            for (const error of errors) {
                logger.logError(`‚ùå ${error}`);
            }
            throw new Error('Environment validation failed');
        }
        
        logger.logInfo('üåç Environment variables validated');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    hasAnyRPCProvider() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ RPC endpoints
        for (let i = 1; i <= 10; i++) {
            const rpc = process.env[`POLYGON_RPC_${i}`];
            if (rpc && rpc !== 'undefined' && rpc.startsWith('http')) {
                return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if ((process.env.ALCHEMY_API_KEY && process.env.ALCHEMY_API_KEY !== 'undefined') ||
            (process.env.INFURA_API_KEY && process.env.INFURA_API_KEY !== 'undefined')) {
            return true;
        }
        
        return false;
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
     */
    validateDependencies() {
        const requiredModules = [
            'ethers',
            'node-telegram-bot-api',
            'fs-extra',
            'dotenv'
        ];
        
        for (const module of requiredModules) {
            try {
                require(module);
            } catch (error) {
                throw new Error(`Missing required module: ${module}. Run: npm install`);
            }
        }
        
        logger.logInfo('üì¶ Dependencies validated');
    }
    
    /**
     * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram
     */
    async testTelegramConnection() {
        if (telegramNotifier.getStatus().configured) {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                if (this.restartCount === 0) {
                    await telegramNotifier.sendTestMessage();
                    logger.logInfo('üì± Telegram connection tested');
                }
            } catch (error) {
                logger.logWarning('‚ö†Ô∏è Telegram test failed, but bot will continue', error.message);
            }
        } else {
            logger.logInfo('üì± Telegram not configured - skipping test');
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
     */
    startPeriodicReporting() {
        // –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(async () => {
            if (this.bot && !this.isShuttingDown) {
                try {
                    const stats = this.bot.getStats();
                    await telegramNotifier.sendPeriodicReport(stats);
                    logger.logInfo('üìä Periodic report sent');
                } catch (error) {
                    logger.logError('Failed to send periodic report', error);
                }
            }
        }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
        
        // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        setInterval(() => {
            if (this.bot && !this.isShuttingDown) {
                this.bot.printStats();
            }
        }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞
     */
    async handleStartupError(error) {
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
        if (now - this.lastRestart < this.restartCooldown) {
            logger.logError('‚ùå Restart cooldown active, exiting');
            process.exit(1);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
        if (this.restartCount >= this.maxRestarts) {
            logger.logError(`‚ùå Maximum restart attempts (${this.maxRestarts}) exceeded`);
            await telegramNotifier.sendErrorAlert(error, 'Startup failure - max restarts exceeded');
            process.exit(1);
        }
        
        this.restartCount++;
        this.lastRestart = now;
        
        logger.logWarning(`‚ö†Ô∏è Startup failed (attempt ${this.restartCount}/${this.maxRestarts}), restarting in ${this.restartCooldown/1000}s...`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try {
            await telegramNotifier.sendErrorAlert(error, `Startup failure - restart attempt ${this.restartCount}`);
        } catch (telegramError) {
            logger.logError('Failed to send error notification', telegramError);
        }
        
        // –ñ–¥–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        setTimeout(() => {
            this.start();
        }, this.restartCooldown);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
     */
    setupErrorHandlers() {
        // Unhandled Promise Rejections
        process.on('unhandledRejection', async (reason, promise) => {
            logger.logError('üö® Unhandled Promise Rejection', reason);
            
            try {
                await telegramNotifier.sendErrorAlert(
                    new Error(reason), 
                    'Unhandled Promise Rejection'
                );
            } catch (error) {
                logger.logError('Failed to send unhandled rejection notification', error);
            }
            
            // –ù–µ –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É, –¥–∞–µ–º –±–æ—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        });
        
        // Uncaught Exceptions
        process.on('uncaughtException', async (error) => {
            logger.logError('üö® Uncaught Exception', error);
            
            try {
                await telegramNotifier.sendErrorAlert(error, 'Uncaught Exception - CRITICAL');
                
                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                setTimeout(() => {
                    process.exit(1);
                }, 2000);
            } catch (telegramError) {
                logger.logError('Failed to send critical error notification', telegramError);
                process.exit(1);
            }
        });
        
        // Warning events
        process.on('warning', (warning) => {
            logger.logWarning('‚ö†Ô∏è Process Warning', warning.message);
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
     */
    setupGracefulShutdown() {
        const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
        
        signals.forEach(signal => {
            process.on(signal, async () => {
                if (this.isShuttingDown) {
                    logger.logWarning('‚ö†Ô∏è Force shutdown - terminating immediately');
                    process.exit(1);
                }
                
                logger.logInfo(`üì§ Received ${signal}, starting graceful shutdown...`);
                await this.shutdown();
            });
        });
    }
    
    /**
     * Graceful shutdown
     */
    async shutdown() {
        this.isShuttingDown = true;
        
        try {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            if (this.bot) {
                await this.bot.stop();
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const finalStats = this.bot ? this.bot.getStats() : {};
            await saveStats(finalStats);
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await telegramNotifier.sendShutdownNotification(finalStats);
            
            logger.logSuccess('‚úÖ Graceful shutdown completed');
            process.exit(0);
            
        } catch (error) {
            logger.logError('‚ùå Error during shutdown', error);
            process.exit(1);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    getManagerStats() {
        const uptime = Date.now() - this.startTime;
        
        return {
            managerUptime: Math.floor(uptime / 1000),
            restartCount: this.restartCount,
            lastRestart: this.lastRestart,
            isShuttingDown: this.isShuttingDown,
            botRunning: this.bot ? !this.bot.isRunning : false
        };
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('ü§ñ Optimized Polygon Arbitrage Bot v2.0');
    console.log('‚ïê'.repeat(50));
    
    const manager = new BotManager();
    await manager.start();
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(error => {
        console.error('üí• Fatal startup error:', error);
        process.exit(1);
    });
}

module.exports = BotManager;