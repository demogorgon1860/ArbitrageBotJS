/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PriceFetcher - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å getReserves() –≤ ethers.js v6
 */

const { ethers } = require('ethers');
const logger = require('./logger');

class PriceFetcher {
    constructor(provider) {
        this.provider = provider;
        this.cache = new Map();
        this.cacheTimeout = 30000;
        this.stablecoins = ['USDC', 'USDT'];
    }
    
    updateProvider(newProvider) {
        this.provider = newProvider;
        logger.logInfo('üîÑ PriceFetcher provider updated');
    }
    
    async getTokenPrice(tokenSymbol, dexName, inputAmountUSD = 1000) {
        try {
            console.log(`\nüîç Getting ${tokenSymbol} price from ${dexName}`);
            
            const config = require('../config/polygon.json');
            const token = config.tokens[tokenSymbol];
            const dex = config.dexes[dexName];
            
            if (!token || !dex) {
                throw new Error(`Missing configuration for ${tokenSymbol} on ${dexName}`);
            }
            
            console.log(`  üìã Token: ${token.address} (${token.decimals} decimals)`);
            console.log(`  üè™ DEX: ${dex.name} (${dex.type})`);
            
            // –ï—Å–ª–∏ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
            if (this.stablecoins.includes(tokenSymbol)) {
                console.log(`  üí∞ Stablecoin detected, returning $1.00`);
                return {
                    success: true,
                    price: 1.0,
                    liquidity: 1000000,
                    method: 'stablecoin',
                    dex: dexName,
                    path: [tokenSymbol],
                    estimatedSlippage: 0.01
                };
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—É—Ç–∏
            const availablePaths = config.tradingPaths[tokenSymbol] || [];
            console.log(`  üõ£Ô∏è Available paths: ${availablePaths.length}`);
            
            // –ü—Ä–æ–±—É–µ–º –ø—É—Ç–∏ –∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º
            const usdPaths = availablePaths.filter(path => 
                path.length === 2 && this.stablecoins.includes(path[1])
            );
            
            console.log(`  üíµ USD paths found: ${usdPaths.length}`);
            
            for (const path of usdPaths) {
                console.log(`\n  üß™ Testing path: ${path.join(' ‚Üí ')}`);
                
                try {
                    const result = await this.getDirectPairPrice(path, dex);
                    if (result.success) {
                        console.log(`    ‚úÖ SUCCESS! Price: $${result.price.toFixed(4)}`);
                        return result;
                    } else {
                        console.log(`    ‚ùå Failed: ${result.error}`);
                    }
                } catch (error) {
                    console.log(`    ‚ùå Exception: ${error.message}`);
                }
            }
            
            // –ü—Ä–æ–±—É–µ–º –ø—É—Ç–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã
            const otherPaths = availablePaths.filter(path => !usdPaths.includes(path));
            console.log(`\n  üîÑ Trying ${otherPaths.length} conversion paths...`);
            
            for (const path of otherPaths) {
                console.log(`\n  üß™ Testing conversion: ${path.join(' ‚Üí ')}`);
                
                try {
                    const pathResult = await this.getDirectPairPrice(path, dex);
                    if (pathResult.success) {
                        console.log(`    üìä Path price: ${pathResult.price.toFixed(6)} ${path[1]}`);
                        
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
                        const usdPrice = await this.convertToUSD(pathResult.price, path[1], dex);
                        if (usdPrice > 0) {
                            console.log(`    ‚úÖ USD price: $${usdPrice.toFixed(4)}`);
                            return {
                                ...pathResult,
                                price: usdPrice,
                                method: 'converted_to_usd'
                            };
                        } else {
                            console.log(`    ‚ùå Failed to convert to USD`);
                        }
                    }
                } catch (error) {
                    console.log(`    ‚ùå Exception: ${error.message}`);
                }
            }
            
            throw new Error('No working paths found');
            
        } catch (error) {
            console.log(`\n‚ùå Final error: ${error.message}`);
            return {
                success: false,
                error: error.message,
                price: 0,
                dex: dexName
            };
        }
    }
    
    async getDirectPairPrice(path, dex) {
        const config = require('../config/polygon.json');
        const tokenA = config.tokens[path[0]];
        const tokenB = config.tokens[path[1]];
        
        console.log(`      üîó Testing pair: ${tokenA.address} / ${tokenB.address}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–∞—Ä—ã
            const factoryABI = ["function getPair(address,address) external view returns (address)"];
            const factory = new ethers.Contract(dex.factory, factoryABI, this.provider);
            
            console.log(`      üìû Calling factory.getPair()...`);
            const pairAddress = await factory.getPair(tokenA.address, tokenB.address);
            
            console.log(`      üìç Pair address: ${pairAddress}`);
            
            if (pairAddress === '0x0000000000000000000000000000000000000000') {
                return {
                    success: false,
                    error: 'Pair does not exist'
                };
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ABI –¥–ª—è getReserves –≤ ethers.js v6
            const pairABI = [
                "function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)",
                "function token0() external view returns (address)"
            ];
            
            console.log(`      üìû Reading reserves...`);
            const pair = new ethers.Contract(pairAddress, pairABI, this.provider);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ ethers.js v6
            const [reservesResult, token0Address] = await Promise.all([
                pair.getReserves(),
                pair.token0()
            ]);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í ethers.js v6 —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç
            const reserve0 = reservesResult[0]; // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
            const reserve1 = reservesResult[1]; // –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
            
            console.log(`      üìä Reserve0: ${reserve0.toString()}`);
            console.log(`      üìä Reserve1: ${reserve1.toString()}`);
            console.log(`      üéØ Token0: ${token0Address}`);
            
            if (reserve0 == 0 || reserve1 == 0) {
                return {
                    success: false,
                    error: 'Empty reserves'
                };
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
            let reserveA, reserveB;
            if (token0Address.toLowerCase() === tokenA.address.toLowerCase()) {
                reserveA = parseFloat(ethers.formatUnits(reserve0, tokenA.decimals));
                reserveB = parseFloat(ethers.formatUnits(reserve1, tokenB.decimals));
                console.log(`      ‚úÖ TokenA is token0`);
            } else {
                reserveA = parseFloat(ethers.formatUnits(reserve1, tokenA.decimals));
                reserveB = parseFloat(ethers.formatUnits(reserve0, tokenB.decimals));
                console.log(`      ‚úÖ TokenA is token1`);
            }
            
            console.log(`      üíß ReserveA (${tokenA.symbol}): ${reserveA.toFixed(2)}`);
            console.log(`      üíß ReserveB (${tokenB.symbol}): ${reserveB.toFixed(2)}`);
            
            // –¶–µ–Ω–∞ tokenA –≤ tokenB
            const price = reserveB / reserveA;
            console.log(`      üí± Price: 1 ${tokenA.symbol} = ${price.toFixed(6)} ${tokenB.symbol}`);
            
            if (!isFinite(price) || price <= 0) {
                return {
                    success: false,
                    error: `Invalid price: ${price}`
                };
            }
            
            // –†–∞—Å—á–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ USD (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            let liquidityUSD;
            if (this.stablecoins.includes(tokenB.symbol)) {
                liquidityUSD = reserveB * 2; // –î–ª—è USD –ø–∞—Ä
            } else {
                liquidityUSD = Math.sqrt(reserveA * reserveB) * 2; // –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
            }
            
            console.log(`      üíß Liquidity: $${(liquidityUSD/1000).toFixed(0)}K (estimated)`);
            
            return {
                success: true,
                price,
                liquidity: liquidityUSD,
                reserveA,
                reserveB,
                pairAddress,
                method: 'v2_direct',
                dex: dex.name,
                path: path,
                estimatedSlippage: this.calculateSlippage(1000, liquidityUSD)
            };
            
        } catch (error) {
            console.log(`      ‚ùå Error: ${error.message}`);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    async convertToUSD(price, tokenSymbol, dex) {
        console.log(`    üîÑ Converting ${price.toFixed(6)} ${tokenSymbol} to USD...`);
        
        if (this.stablecoins.includes(tokenSymbol)) {
            console.log(`    üí∞ Already USD: $${price.toFixed(4)}`);
            return price;
        }
        
        try {
            let conversionPath;
            
            if (tokenSymbol === 'WMATIC') {
                conversionPath = ['WMATIC', 'USDC'];
            } else if (tokenSymbol === 'WETH') {
                conversionPath = ['WETH', 'USDC'];
            } else {
                console.log(`    ‚ùå Unknown conversion for ${tokenSymbol}`);
                return 0;
            }
            
            console.log(`    üõ£Ô∏è Conversion path: ${conversionPath.join(' ‚Üí ')}`);
            
            const conversionResult = await this.getDirectPairPrice(conversionPath, dex);
            if (conversionResult.success) {
                const usdPrice = price * conversionResult.price;
                console.log(`    ‚úÖ ${price.toFixed(6)} ${tokenSymbol} √ó ${conversionResult.price.toFixed(4)} USD/${tokenSymbol} = $${usdPrice.toFixed(4)}`);
                return usdPrice;
            } else {
                console.log(`    ‚ùå Conversion failed: ${conversionResult.error}`);
                return 0;
            }
            
        } catch (error) {
            console.log(`    ‚ùå Conversion error: ${error.message}`);
            return 0;
        }
    }
    
    calculateSlippage(tradeAmountUSD, liquidityUSD) {
        if (!liquidityUSD || liquidityUSD <= 0) return 0.5;
        
        const ratio = tradeAmountUSD / liquidityUSD;
        if (ratio > 0.1) return 5.0;
        if (ratio > 0.05) return 2.0;
        if (ratio > 0.02) return 1.0;
        if (ratio > 0.01) return 0.5;
        return 0.1;
    }
    
    // –ú–µ—Ç–æ–¥—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    getFromCache(key) { return null; }
    setCache(key, data) { }
    clearCache() { }
}

module.exports = PriceFetcher;