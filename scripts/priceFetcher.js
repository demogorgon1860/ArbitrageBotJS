/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô PriceFetcher —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Uniswap V3
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –º–∞–ª–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è V3 –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
 */

const { ethers } = require('ethers');
const logger = require('./logger');

class V3EnhancedPriceFetcher {
    constructor(provider) {
        this.provider = provider;
        this.cache = new Map();
        this.cacheTimeout = 30000;
        this.stablecoins = ['USDC', 'USDT', 'DAI'];
        this.config = require('../config/polygon.json');
        
        // V3 ABI –¥–ª—è quoter
        this.quoterV3ABI = [
            "function quoteExactInputSingle(address tokenIn, address tokenOut, uint24 fee, uint256 amountIn, uint160 sqrtPriceLimitX96) external returns (uint256 amountOut)",
            "function quoteExactInput(bytes path, uint256 amountIn) external returns (uint256 amountOut)"
        ];
        
        // V3 Pool ABI –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        this.poolV3ABI = [
            "function liquidity() external view returns (uint128)",
            "function slot0() external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked)",
            "function token0() external view returns (address)",
            "function token1() external view returns (address)",
            "function fee() external view returns (uint24)"
        ];
        
        // V3 Factory ABI
        this.factoryV3ABI = [
            "function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool)"
        ];
        
        logger.logInfo('üîß V3-Enhanced PriceFetcher initialized with Uniswap V3 support');
    }
    
    updateProvider(newProvider) {
        this.provider = newProvider;
        logger.logInfo('üîÑ V3-Enhanced PriceFetcher provider updated');
    }
    
    async getTokenPrice(tokenSymbol, dexName, inputAmountUSD = 1000, options = {}) {
        try {
            console.log(`\nüîç V3-Enhanced price fetching: ${tokenSymbol} on ${dexName}`);
            
            const token = this.config.tokens[tokenSymbol];
            const dex = this.config.dexes[dexName];
            
            if (!token || !dex) {
                throw new Error(`Missing configuration for ${tokenSymbol} on ${dexName}`);
            }
            
            // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
            if (this.stablecoins.includes(tokenSymbol)) {
                console.log(`  üí∞ Stablecoin detected: ${tokenSymbol} = $1.00`);
                return {
                    success: true,
                    price: 1.0,
                    liquidity: 10000000, // $10M –¥–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
                    liquidityBreakdown: {
                        totalLiquidity: 10000000,
                        method: 'stablecoin_assumption',
                        steps: []
                    },
                    method: 'stablecoin',
                    dex: dexName,
                    path: [tokenSymbol],
                    estimatedSlippage: 0.01
                };
            }
            
            // –ü–†–ò–û–†–ò–¢–ï–¢ V3: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º V3, –∑–∞—Ç–µ–º V2
            if (dex.type === 'v3' || dexName.includes('v3') || dexName === 'uniswap') {
                console.log(`  ü¶Ñ Using V3 protocol for ${dexName}`);
                return await this.getV3PriceEnhanced(tokenSymbol, dex, inputAmountUSD, options);
            } else {
                console.log(`  üç± Using V2 AMM for ${tokenSymbol} on ${dex.name} (fallback)`);
                // V2 –∫–∞–∫ fallback —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                const v2Result = await this.getV2Price(tokenSymbol, dex, inputAmountUSD, options);
                if (v2Result.success) {
                    console.log(`    ‚ö†Ô∏è WARNING: Using V2 pool (may have low liquidity)`);
                }
                return v2Result;
            }
            
        } catch (error) {
            console.log(`\n‚ùå V3-Enhanced price fetch error: ${error.message}`);
            return {
                success: false,
                error: error.message,
                price: 0,
                liquidity: 0,
                liquidityBreakdown: { totalLiquidity: 0, method: 'error', steps: [] },
                dex: dexName,
                rejectionReason: 'fetch_error'
            };
        }
    }
    
    /**
     * –ù–û–í–´–ô: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω V3 —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
     */
    async getV3PriceEnhanced(tokenSymbol, dex, inputAmountUSD, options = {}) {
        const token = this.config.tokens[tokenSymbol];
        const availablePaths = this.config.tradingPaths[tokenSymbol] || [];
        const sortedPaths = this.prioritizePaths(availablePaths, tokenSymbol);
        
        // V3 fee tiers –ø–æ –ø–æ—Ä—è–¥–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        const feeTiers = [3000, 500, 10000]; // 0.3%, 0.05%, 1%
        
        console.log(`  üîç Testing ${sortedPaths.length} paths across ${feeTiers.length} fee tiers`);
        
        for (const path of sortedPaths) {
            console.log(`\n  üõ£Ô∏è Testing V3 path: ${path.join(' ‚Üí ')}`);
            
            try {
                const result = await this.getV3PathPriceWithLiquidity(path, dex, feeTiers, inputAmountUSD);
                if (result.success && result.liquidity > 1000) { // –ú–∏–Ω–∏–º—É–º $1K –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    return result;
                }
            } catch (error) {
                console.log(`    ‚ùå V3 path failed: ${error.message}`);
            }
        }
        
        // Multi-hop V3 fallback
        if (options.enableMultiHop !== false) {
            console.log(`\n  üîÑ Trying V3 multi-hop for ${tokenSymbol}...`);
            return await this.tryMultiHopV3Enhanced(tokenSymbol, dex, inputAmountUSD);
        }
        
        return {
            success: false,
            error: 'No working V3 paths with sufficient liquidity found',
            price: 0,
            liquidity: 0,
            liquidityBreakdown: { totalLiquidity: 0, method: 'no_v3_paths', steps: [] },
            dex: dex.name,
            rejectionReason: 'no_v3_paths'
        };
    }
    
    /**
     * V3 –ø—É—Ç—å —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –∏–∑ –ø—É–ª–æ–≤
     */
    async getV3PathPriceWithLiquidity(path, dex, feeTiers, inputAmountUSD) {
        const tokenA = this.config.tokens[path[0]];
        const tokenB = this.config.tokens[path[1]];
        
        if (!tokenA || !tokenB) {
            throw new Error(`Invalid tokens in path: ${path.join(' ‚Üí ')}`);
        }
        
        const inputAmount = await this.convertUSDToTokenAmount(inputAmountUSD, tokenA);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ V3 –∞–¥—Ä–µ—Å–∞
            const quoterAddress = dex.quoter || "0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6";
            const factoryAddress = dex.factory || "0x1F98431c8aD98523631AE4a59f267346ea31F984";
            
            const quoter = new ethers.Contract(quoterAddress, this.quoterV3ABI, this.provider);
            const factory = new ethers.Contract(factoryAddress, this.factoryV3ABI, this.provider);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ fee tiers –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            for (const fee of feeTiers) {
                try {
                    console.log(`    üíé Testing V3 pool with ${fee/10000}% fee`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞
                    const poolAddress = await factory.getPool(tokenA.address, tokenB.address, fee);
                    
                    if (poolAddress === '0x0000000000000000000000000000000000000000') {
                        console.log(`      ‚ùå Pool doesn't exist for ${fee/10000}% fee`);
                        continue;
                    }
                    
                    // –ü–æ–ª—É—á–∞–µ–º quote
                    const amountOut = await quoter.quoteExactInputSingle(
                        tokenA.address,
                        tokenB.address,
                        fee,
                        ethers.parseUnits(inputAmount.toString(), tokenA.decimals),
                        0
                    );
                    
                    const outputTokens = parseFloat(ethers.formatUnits(amountOut, tokenB.decimals));
                    
                    if (outputTokens <= 0) {
                        console.log(`      ‚ùå Zero output for ${fee/10000}% fee`);
                        continue;
                    }
                    
                    const price = await this.calculatePriceFromOutput(
                        inputAmount, outputTokens, tokenA, tokenB
                    );
                    
                    // –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏–∑ V3 –ø—É–ª–∞
                    const realLiquidity = await this.getV3PoolRealLiquidity(
                        poolAddress, tokenA, tokenB, fee
                    );
                    
                    console.log(`      ‚úÖ V3 Success: $${price.toFixed(4)} | Liquidity: $${(realLiquidity/1000).toFixed(0)}K | Fee: ${fee/10000}%`);
                    
                    return {
                        success: true,
                        price,
                        liquidity: realLiquidity,
                        liquidityBreakdown: {
                            totalLiquidity: realLiquidity,
                            method: 'v3_pool_real_liquidity',
                            poolAddress,
                            fee,
                            steps: [{
                                token: tokenA.symbol,
                                pool: poolAddress,
                                fee: fee,
                                liquidity: realLiquidity,
                                source: 'v3_pool_direct'
                            }]
                        },
                        method: 'v3_quoter',
                        dex: dex.name,
                        path: path,
                        fee: fee,
                        poolAddress,
                        estimatedSlippage: this.calculateV3DynamicSlippage(inputAmountUSD, realLiquidity, fee)
                    };
                    
                } catch (error) {
                    console.log(`      ‚ùå Fee ${fee/10000}% failed: ${error.message}`);
                    continue;
                }
            }
            
            throw new Error('All V3 fee tiers failed');
            
        } catch (error) {
            throw new Error(`V3 quoter failed: ${error.message}`);
        }
    }
    
    /**
     * –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–∑ V3 –ø—É–ª–∞
     */
    async getV3PoolRealLiquidity(poolAddress, tokenA, tokenB, fee) {
        try {
            const pool = new ethers.Contract(poolAddress, this.poolV3ABI, this.provider);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞
            const [liquidity, slot0, token0Address] = await Promise.all([
                pool.liquidity(),
                pool.slot0(),
                pool.token0()
            ]);
            
            const sqrtPriceX96 = slot0[0];
            const tick = slot0[1];
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sqrtPriceX96 –≤ –æ–±—ã—á–Ω—É—é —Ü–µ–Ω—É
            const Q96 = 2n ** 96n;
            const price = Number(sqrtPriceX96) ** 2 / Number(Q96) ** 2;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
            const isToken0A = token0Address.toLowerCase() === tokenA.address.toLowerCase();
            const priceAdjusted = isToken0A ? price : 1 / price;
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ decimals
            const decimalsAdjustment = Math.pow(10, tokenB.decimals - tokenA.decimals);
            const finalPrice = priceAdjusted * decimalsAdjustment;
            
            // –û—Ü–µ–Ω–∏–≤–∞–µ–º TVL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã
            // V3 –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            const liquidityFloat = Number(liquidity);
            
            // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ TVL (Total Value Locked)
            let estimatedTVL = 0;
            
            if (this.stablecoins.includes(tokenB.symbol)) {
                // –ï—Å–ª–∏ —Ç–æ—Ä–≥—É–µ–º –ø—Ä–æ—Ç–∏–≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞
                estimatedTVL = liquidityFloat * finalPrice / 1e12; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                const tokenAPrice = await this.getTokenUSDPriceWithSource(tokenA.symbol);
                const tokenBPrice = await this.getTokenUSDPriceWithSource(tokenB.symbol);
                
                estimatedTVL = liquidityFloat * Math.sqrt(tokenAPrice.price * tokenBPrice.price) / 1e15;
            }
            
            // V3 –ø—É–ª—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            const realisticTVL = Math.max(estimatedTVL, 10000); // –ú–∏–Ω–∏–º—É–º $10K –¥–ª—è V3
            
            console.log(`      üìä V3 Pool Analysis:`);
            console.log(`        Liquidity: ${liquidityFloat.toExponential(2)}`);
            console.log(`        Price: ${finalPrice.toFixed(6)}`);
            console.log(`        Estimated TVL: $${(realisticTVL/1000).toFixed(0)}K`);
            console.log(`        Fee Tier: ${fee/10000}%`);
            
            return realisticTVL;
            
        } catch (error) {
            console.log(`      ‚ö†Ô∏è Failed to get V3 pool liquidity: ${error.message}`);
            // Fallback –¥–ª—è V3 - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ö–æ—Ä–æ—à—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            return 50000; // $50K –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è V3
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç slippage –¥–ª—è V3 —Å —É—á–µ—Ç–æ–º fee tier
     */
    calculateV3DynamicSlippage(tradeAmountUSD, liquidityUSD, fee) {
        if (!liquidityUSD || liquidityUSD <= 0) return 2.0;
        
        const tradeRatio = tradeAmountUSD / liquidityUSD;
        
        // –ë–∞–∑–æ–≤—ã–π slippage –∑–∞–≤–∏—Å–∏—Ç –æ—Ç fee tier
        let baseSlippage = 0.1;
        if (fee === 500) baseSlippage = 0.05;      // 0.05% fee = –Ω–∏–∑–∫–∏–π slippage
        else if (fee === 3000) baseSlippage = 0.15; // 0.3% fee = —Å—Ä–µ–¥–Ω–∏–π
        else if (fee === 10000) baseSlippage = 0.5;  // 1% fee = –≤—ã—Å–æ–∫–∏–π
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ç—Ä–µ–π–¥–∞
        if (tradeRatio > 0.1) baseSlippage *= 5;
        else if (tradeRatio > 0.05) baseSlippage *= 3;
        else if (tradeRatio > 0.02) baseSlippage *= 2;
        else if (tradeRatio > 0.01) baseSlippage *= 1.5;
        
        return Math.min(5.0, Math.max(0.02, baseSlippage));
    }
    
    /**
     * Multi-hop V3 —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
     */
    async tryMultiHopV3Enhanced(tokenSymbol, dex, inputAmountUSD) {
        const bridgeTokens = ['WETH', 'USDC', 'WMATIC']; // –ü–æ—Ä—è–¥–æ–∫ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        
        for (const bridgeToken of bridgeTokens) {
            if (bridgeToken === tokenSymbol) continue;
            
            try {
                console.log(`    üåâ V3 Multi-hop via ${bridgeToken}...`);
                
                const step1 = await this.getV3PathPriceWithLiquidity(
                    [tokenSymbol, bridgeToken], dex, [3000, 500, 10000], inputAmountUSD
                );
                
                if (!step1.success || step1.liquidity < 5000) continue;
                
                if (bridgeToken !== 'USDC') {
                    const step2 = await this.getV3PathPriceWithLiquidity(
                        [bridgeToken, 'USDC'], dex, [3000, 500, 10000], inputAmountUSD
                    );
                    
                    if (!step2.success || step2.liquidity < 5000) continue;
                    
                    const finalPrice = step1.price * step2.price;
                    const chainLiquidity = this.aggregateV3ChainLiquidity([step1.liquidityBreakdown, step2.liquidityBreakdown]);
                    
                    console.log(`    ‚úÖ V3 Multi-hop: $${finalPrice.toFixed(6)} | Chain liquidity: $${(chainLiquidity.totalLiquidity/1000).toFixed(0)}K`);
                    
                    return {
                        success: true,
                        price: finalPrice,
                        liquidity: chainLiquidity.totalLiquidity,
                        liquidityBreakdown: chainLiquidity,
                        method: 'v3_multihop',
                        dex: dex.name,
                        path: [tokenSymbol, bridgeToken, 'USDC'],
                        estimatedSlippage: Math.max(step1.estimatedSlippage, step2.estimatedSlippage) * 1.3,
                        hops: 2,
                        stepDetails: {
                            step1: step1.liquidityBreakdown,
                            step2: step2.liquidityBreakdown
                        }
                    };
                } else {
                    return {
                        ...step1,
                        method: 'v3_via_usdc'
                    };
                }
                
            } catch (error) {
                console.log(`      ‚ùå V3 multi-hop via ${bridgeToken} failed: ${error.message}`);
                continue;
            }
        }
        
        return {
            success: false,
            error: 'All V3 multi-hop paths failed',
            liquidity: 0,
            liquidityBreakdown: { totalLiquidity: 0, method: 'v3_multihop_failed', steps: [] },
            rejectionReason: 'v3_multihop_failed'
        };
    }
    
    /**
     * –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è V3 —Ü–µ–ø–æ—á–µ–∫
     */
    aggregateV3ChainLiquidity(liquidityBreakdowns) {
        const steps = liquidityBreakdowns.map((breakdown, index) => ({
            step: `V3 Step ${index + 1}`,
            liquidity: breakdown.totalLiquidity,
            method: breakdown.method,
            poolAddress: breakdown.poolAddress,
            fee: breakdown.fee,
            details: breakdown.steps || []
        }));
        
        // V3 –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è multi-hop
        const efficiencyFactor = 0.85; // 85% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è V3
        const bottleneck = steps.reduce((min, current) => 
            current.liquidity < min.liquidity ? current : min
        );
        
        const effectiveLiquidity = bottleneck.liquidity * efficiencyFactor;
        const totalLiquiditySum = steps.reduce((sum, step) => sum + step.liquidity, 0);
        
        return {
            totalLiquidity: effectiveLiquidity,
            totalLiquiditySum,
            method: 'v3_multi_hop_aggregation',
            steps,
            bottleneck,
            efficiencyFactor,
            breakdown: {
                effectiveLiquidity,
                bottleneckLiquidity: bottleneck.liquidity,
                chainLength: steps.length,
                efficiencyLoss: totalLiquiditySum - effectiveLiquidity
            }
        };
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
    
    prioritizePaths(paths, tokenSymbol) {
        // V3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: USDC > WETH > WMATIC
        const v3PriorityOrder = ['USDC', 'WETH', 'WMATIC', 'USDT', 'WBTC'];
        
        return paths.sort((a, b) => {
            const aPriority = v3PriorityOrder.indexOf(a[1]);
            const bPriority = v3PriorityOrder.indexOf(b[1]);
            
            if (aPriority !== -1 && bPriority !== -1) {
                return aPriority - bPriority;
            }
            if (aPriority !== -1) return -1;
            if (bPriority !== -1) return 1;
            return a[1].localeCompare(b[1]);
        });
    }
    
    async getTokenUSDPriceWithSource(tokenSymbol) {
        if (this.stablecoins.includes(tokenSymbol)) {
            return { price: 1, source: 'stablecoin', confidence: 0.99 };
        }
        
        const fallbackPrices = {
            'WETH': { price: 2600, source: 'fallback_estimate', confidence: 0.7 },
            'WMATIC': { price: 0.9, source: 'fallback_estimate', confidence: 0.7 },
            'WBTC': { price: 105000, source: 'fallback_estimate', confidence: 0.7 },
            'LINK': { price: 14, source: 'fallback_estimate', confidence: 0.6 },
            'AAVE': { price: 264, source: 'fallback_estimate', confidence: 0.6 }
        };
        
        return fallbackPrices[tokenSymbol] || { price: 1, source: 'unknown', confidence: 0.3 };
    }
    
    async convertUSDToTokenAmount(usdAmount, tokenInfo) {
        if (this.stablecoins.includes(tokenInfo.symbol)) {
            return usdAmount;
        }
        
        const tokenPrice = await this.getTokenUSDPriceWithSource(tokenInfo.symbol);
        return usdAmount / tokenPrice.price;
    }
    
    async calculatePriceFromOutput(inputAmount, outputAmount, tokenA, tokenB) {
        if (this.stablecoins.includes(tokenB.symbol)) {
            return outputAmount / inputAmount;
        }
        
        const outputTokenPrice = await this.getTokenUSDPriceWithSource(tokenB.symbol);
        const usdOutput = outputAmount * outputTokenPrice.price;
        
        return usdOutput / inputAmount;
    }
    
    // V2 –º–µ—Ç–æ–¥—ã –∫–∞–∫ fallback (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    async getV2Price(tokenSymbol, dex, inputAmountUSD, options = {}) {
        console.log(`    ‚ö†Ô∏è V2 Fallback: Limited liquidity expected for ${tokenSymbol}`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é V2 –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        // –ù–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –Ω–∞ V3
        
        return {
            success: false,
            error: 'V2 fallback - recommend using V3 DEX',
            price: 0,
            liquidity: 0,
            liquidityBreakdown: { totalLiquidity: 0, method: 'v2_deprecated', steps: [] },
            dex: dex.name,
            rejectionReason: 'v2_low_liquidity'
        };
    }
}

module.exports = V3EnhancedPriceFetcher;