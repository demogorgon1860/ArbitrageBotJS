#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Polygon Arbitrage Bot
 * –ó–∞–ø—É—Å–∫: node setup.js
 */

const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');

class BotSetup {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }
    
    async run() {
        console.log('üöÄ Polygon Arbitrage Bot Setup');
        console.log('‚ïê'.repeat(50));
        
        try {
            await this.createDirectories();
            await this.setupEnvironment();
            await this.validateSetup();
            
            console.log('\n‚úÖ Setup completed successfully!');
            console.log('\nüìã Next steps:');
            console.log('1. Review your .env file');
            console.log('2. Run: npm start');
            console.log('3. Monitor logs for any issues');
            
        } catch (error) {
            console.error('\n‚ùå Setup failed:', error.message);
            process.exit(1);
        } finally {
            this.rl.close();
        }
    }
    
    async createDirectories() {
        console.log('\nüìÅ Creating directory structure...');
        
        const directories = [
            './data',
            './logs',
            './cache',
            './config',
            './scripts',
            './test'
        ];
        
        for (const dir of directories) {
            await fs.ensureDir(dir);
            console.log(`  ‚úÖ ${dir}`);
        }
    }
    
    async setupEnvironment() {
        console.log('\n‚öôÔ∏è Setting up environment configuration...');
        
        const envPath = './.env';
        const envExamplePath = './.env.example';
        
        // –°–æ–∑–¥–∞–µ–º .env.example –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!await fs.pathExists(envExamplePath)) {
            const envExample = this.getEnvExample();
            await fs.writeFile(envExamplePath, envExample);
            console.log('  ‚úÖ Created .env.example');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
        if (await fs.pathExists(envPath)) {
            const answer = await this.askQuestion('  .env file already exists. Overwrite? (y/N): ');
            if (answer.toLowerCase() !== 'y') {
                console.log('  ‚è≠Ô∏è Skipping .env creation');
                return;
            }
        }
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env
        const config = await this.collectConfiguration();
        const envContent = this.generateEnvContent(config);
        
        await fs.writeFile(envPath, envContent);
        console.log('  ‚úÖ Created .env file');
    }
    
    async collectConfiguration() {
        console.log('\nüìù Configuration setup (press Enter to skip optional fields):');
        
        const config = {};
        
        // RPC Provider
        console.log('\nüåê RPC Provider (choose one):');
        config.alchemyKey = await this.askQuestion('  Alchemy API Key (recommended): ');
        
        if (!config.alchemyKey) {
            config.infuraKey = await this.askQuestion('  Infura API Key (alternative): ');
        }
        
        if (!config.alchemyKey && !config.infuraKey) {
            config.customRpc = await this.askQuestion('  Custom RPC URL: ');
        }
        
        // Telegram
        console.log('\nüì± Telegram Notifications (optional but recommended):');
        config.telegramToken = await this.askQuestion('  Telegram Bot Token: ');
        if (config.telegramToken) {
            config.telegramChatId = await this.askQuestion('  Telegram Chat ID: ');
        }
        
        // Trading Parameters
        console.log('\nüí∞ Trading Parameters:');
        config.minBasisPoints = await this.askQuestion('  Minimum spread (basis points, default 50): ') || '50';
        config.inputAmount = await this.askQuestion('  Trade size USD (default 1000): ') || '1000';
        config.checkInterval = await this.askQuestion('  Check interval seconds (default 15): ') || '15';
        
        return config;
    }
    
    generateEnvContent(config) {
        let content = '# Polygon Arbitrage Bot Configuration\n';
        content += '# Generated by setup script\n\n';
        
        // RPC Providers
        content += '# ===================================\n';
        content += '# RPC PROVIDERS\n';
        content += '# ===================================\n';
        
        if (config.alchemyKey) {
            content += `ALCHEMY_API_KEY=${config.alchemyKey}\n`;
        } else {
            content += '#ALCHEMY_API_KEY=your_alchemy_api_key_here\n';
        }
        
        if (config.infuraKey) {
            content += `INFURA_API_KEY=${config.infuraKey}\n`;
        } else {
            content += '#INFURA_API_KEY=your_infura_api_key_here\n';
        }
        
        if (config.customRpc) {
            content += `POLYGON_RPC_1=${config.customRpc}\n`;
        } else {
            content += '#POLYGON_RPC_1=https://polygon-rpc.com\n';
        }
        
        content += '\n';
        
        // Telegram
        content += '# ===================================\n';
        content += '# TELEGRAM NOTIFICATIONS\n';
        content += '# ===================================\n';
        
        if (config.telegramToken) {
            content += `TELEGRAM_BOT_TOKEN=${config.telegramToken}\n`;
        } else {
            content += '#TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here\n';
        }
        
        if (config.telegramChatId) {
            content += `TELEGRAM_CHAT_ID=${config.telegramChatId}\n`;
        } else {
            content += '#TELEGRAM_CHAT_ID=your_telegram_chat_id_here\n';
        }
        
        content += '\n';
        
        // Trading Parameters
        content += '# ===================================\n';
        content += '# TRADING PARAMETERS\n';
        content += '# ===================================\n';
        content += `MIN_BASIS_POINTS=${config.minBasisPoints}\n`;
        content += `INPUT_AMOUNT_USD=${config.inputAmount}\n`;
        content += `CHECK_INTERVAL_MS=${parseInt(config.checkInterval) * 1000}\n`;
        
        return content;
    }
    
    async validateSetup() {
        console.log('\nüîç Validating setup...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
        if (!await fs.pathExists('./package.json')) {
            console.log('  ‚ö†Ô∏è Warning: package.json not found');
        } else {
            console.log('  ‚úÖ package.json exists');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        const requiredFiles = [
            './scripts/arbitrageBot.js',
            './scripts/priceFetcher.js',
            './scripts/logger.js',
            './config/polygon.json'
        ];
        
        for (const file of requiredFiles) {
            if (await fs.pathExists(file)) {
                console.log(`  ‚úÖ ${file}`);
            } else {
                console.log(`  ‚ùå Missing: ${file}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
        if (await fs.pathExists('./.env')) {
            console.log('  ‚úÖ .env file created');
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è .env
            const envContent = await fs.readFile('./.env', 'utf-8');
            if (envContent.includes('ALCHEMY_API_KEY=') || 
                envContent.includes('INFURA_API_KEY=') || 
                envContent.includes('POLYGON_RPC_1=')) {
                console.log('  ‚úÖ RPC provider configured');
            } else {
                console.log('  ‚ö†Ô∏è Warning: No RPC provider configured');
            }
        }
    }
    
    askQuestion(question) {
        return new Promise(resolve => {
            this.rl.question(question, answer => {
                resolve(answer.trim());
            });
        });
    }
    
    getEnvExample() {
        return `# Polygon Arbitrage Bot Environment Configuration
# Copy this file to .env and fill in your values

# ===================================
# RPC PROVIDERS (At least one required)
# ===================================
ALCHEMY_API_KEY=your_alchemy_api_key_here
#INFURA_API_KEY=your_infura_api_key_here
#POLYGON_RPC_1=https://polygon-rpc.com

# ===================================
# TELEGRAM NOTIFICATIONS (Optional)
# ===================================
#TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
#TELEGRAM_CHAT_ID=your_telegram_chat_id_here

# ===================================
# TRADING PARAMETERS
# ===================================
MIN_BASIS_POINTS=50
INPUT_AMOUNT_USD=1000
CHECK_INTERVAL_MS=15000
`;
    }
}

// –ó–∞–ø—É—Å–∫ setup
if (require.main === module) {
    const setup = new BotSetup();
    setup.run().catch(console.error);
}

module.exports = BotSetup;